name: Platformio
on: [push, workflow_dispatch]

env:
  TARGET: esp32playground # Must match the value after colon in platformio.ini (line 4: [env:nodemcu-32s])
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [esp32playground, plants]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install PlatformIO
      run: pip install -r requirements.txt

    - name: Setup platformio cache
      run: export PLATFORMIO_CACHE_DIR=./.pio/cache

    - name: Fetch cached build
      id: cache-primes
      uses: actions/cache@v3
      with:
        path: "./.pio/cache"
        key: ${{ matrix.target }}

    - name: "Compile Firmware: ${{ matrix.target }}"
      run: pio run --verbose --environment ${{ matrix.target }}
      env:
        DOTENV: ${{ secrets.DOTENV }}

    - name: Cache build
      uses: actions/cache/save@v3
      with:
        path: ./.pio/cache
        key: ${{ matrix.target }}

    - name: "Compile Firmware: ${{ matrix.target }}"
      uses: actions/upload-artifact@v3
      with: 
        name: firmware_${{ matrix.target }}
        path: .pio/build/${{ matrix.target }}/firmware.bin

    # - name: Compile Filesystem
    #   if: steps.check_files.outputs.files_exists == 'true'
    #   run: pio run --target buildfs
    # - name: Rename Filesystem file
    #   if: steps.check_files.outputs.files_exists == 'true'
    #   run: mv .pio/build/${{ env.TARGET }}/*fs.bin .pio/build/${{ env.TARGET }}/filesystem.bin
    # - name: Upload Filesystem
    #   if: steps.check_files.outputs.files_exists == 'true'
    #   uses: actions/upload-artifact@v3
    #   with: 
    #     name: esp32-filesystem
    #     path: .pio/build/${{ env.TARGET }}/filesystem.bin

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download Firmware Files
      uses: actions/download-artifact@v3

    - name: Debug
      run: ls -al

    - name: Release Firmware
      uses: ncipollo/release-action@v1
      with:
        artifacts: ./*/firmware_*.bin
        generateReleaseNotes: true
        artifactErrorsFailBuild: true

    # - name: Release Filesystem
    #   uses: ncipollo/release-action@v1
    #   with:
    #     artifacts: ./*/filesystem.bin
    #     generateReleaseNotes: true
    #     allowUpdates: true
